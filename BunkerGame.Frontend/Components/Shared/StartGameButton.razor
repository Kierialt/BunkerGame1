@* <button class="btn btn-dark btn-lg mx-2 bunker-btn" @onclick="OnClick">
    Start New Game
</button>

<style>
    .bunker-btn {
        background-color: #2e2e2e; /* очень тёмный серый */
        border: 2px solid #8b0000; /* бордер тёмно-красный */
        color: #f8f9fa; /* светлый текст */
        font-family: 'Courier New', Courier, monospace; /* шрифт типа старой печатной машинки */
        letter-spacing: 1px;
        padding: 15px 30px;
        margin: 10px 0; /* чтобы кнопки не слипались */
        transition: background-color 0.3s, transform 0.2s;
    }

    .bunker-btn:hover {
        background-color: #8b0000; /* тёмно-красный при наведении */
        transform: scale(1.05);
    }
</style> *@
<button class="button-postapocalyptic" @onclick="OnClick">
    Start New Game
</button>

@code {
    [Parameter]
    public EventCallback OnClick { get; set; }
}
<button class="button-postapocalyptic" @onclick="StartNewGame">
    Start New Game
</button>

@if (!string.IsNullOrEmpty(ResponseMessage))
{
    <p>@ResponseMessage</p>
}

@code {
    [Inject]
    private HttpClient Http { get; set; }

    private string? ResponseMessage;

    private async Task StartNewGame()
    {
        try
        {
            var response = await Http.PostAsync("http://localhost:5138/api/Game/start", null);
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadFromJsonAsync<GameStartResponse>();
                ResponseMessage = $"Игра запущена! ID: {content?.GameId}";
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ResponseMessage = $"Ошибка: {error}";
            }
        }
        catch (Exception ex)
        {
            ResponseMessage = $"Ошибка при подключении к API: {ex.Message}";
        }
    }

    public class GameStartResponse
    {
        public string GameId { get; set; }
    }
}

